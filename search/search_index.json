{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"Findability indicators F1. Identity Uniqueness The software has a proper, unique and persistent identifier. F2. Existence of Metadata The software is described with rich metadata, including scientific applicability. F3. Searchability How software can be found. Accessibility indicators A1.  Existence of available working version It is possible to access a working version of the tool, either as API or web intefaces, or as a downloadable package than can be built and installed by the user. A2.  Software history trackability There is available code and metadata even when the software is no longer in use. The software has a public version control system, and the history of the software is available. A3.  Unrestricted access There are few low restrictions in terms of authorization and required infrastructure/platform to use the software Interoperability indicators I1.  Documentation on Input/output data types and formats The software has documentation detailing the input and output data types and formats. I2.  Workflow compatibility It is possible to deploy the software in a format that allows to integrate it in pipelines I3.  Dependencies availability Dependencies are documented and mechanisms to obtain them exist Reusability indicators R1. Usage documentation There is adequate usage documentation. R2. License There is a clear and accessible usage license is provided R3. Contribution policy There are contribution guidelines/policy for the software. R4. Provenance"},{"location":"accessibility/A1_downloadable/","title":"A1.  Existence of available working version","text":""},{"location":"accessibility/A1_downloadable/#a11-existence-of-api-or-web-interfaces","title":"A1.1. Existence of API or web interfaces","text":"Why should we measure it? How do we measure it? Types it applies to Remote access to the tool requires only internet access from users and other software, increasing the usability of the resource. The software has a public API or web interface. web"},{"location":"accessibility/A1_downloadable/#a12-existence-of-downloadable-and-buildable-software-working-version","title":"A1.2. Existence of downloadable and buildable software working version","text":"Why should we measure it? How do we measure it? Types it applies to Many users want to be able to install and run the software where and as they wish. Other times, it is imperative to install the resource locally to be able to use it (modules, for instance). A downloadable and buildable version greatly increases the freedom of use and usability of software. At least one working download link is considered valid. non-web"},{"location":"accessibility/A1_downloadable/#a13-existence-of-installation-instructions","title":"A1.3. Existence of installation instructions","text":"Why should we measure it? How do we measure it? Types it applies to A guideline to install the software might be absolutely necessary to successfully build a software. In all cases, it greatly increases the probability of successful installation. A link explicitly stated as installation instruction or manual, instructions on the web if Bioconductor package, availability through Galaxy ToolShed are all considered valid. non-web"},{"location":"accessibility/A1_downloadable/#a14-existence-of-test-data","title":"A1.4. Existence of test data","text":"Why should we measure it? How do we measure it? Types it applies to Test data allows the user to make sure the program works as expected and serves as an example of working data the user can look at when preparing its own data and learning to use the software. At least one piece of test data is considered valid. non-web"},{"location":"accessibility/A1_downloadable/#a15-existence-of-software-source-code","title":"A1.5. Existence of software source code","text":"Why should we measure it? How do we measure it? Types it applies to Source code can be compiled to work in any operating system, and help the user to solve installation and running issues (i.e. dealing with dependencies). The solution to these issues can even be a modification in the code. Source code is the only way to understand how the software works and to modify it to suit the user's needs. A link explicitly stated as source code is considered valid. non-web"},{"location":"accessibility/A2_trackability/","title":"A2.  Software history trackability","text":""},{"location":"accessibility/A2_trackability/#a21-metadata-of-previous-versions-at-software-repositories","title":"A2.1. Metadata of previous versions at software repositories","text":"<p>Whether there is available metadata of previous versions</p> Why should we measure it? How do we measure it? Types it applies to Even if the code/functionality is missing, the existence of metadata for a given version of a software provides evidence of  its previous existence  and relevant details. Not measured all"},{"location":"accessibility/A2_trackability/#a22-existence-of-accessible-previous-versions-of-the-software","title":"A2.2. Existence of accessible previous versions of the software","text":"<p>Whether there are available previous versions</p> Why should we measure it? How do we measure it? Types it applies to Necessary to be able to reproduce analyses with the original software versions. In addtion, even if the code/functionality is missing, the existence of previous versions of a software provides evidence of its previous existence  and relevant details. Not measured all"},{"location":"accessibility/A3_unrestricted_access/","title":"A3.  Unrestricted access","text":"<p>In general, research software should be designed to be easy to use and accessible to a wide range of users, diverse in expertise and geographical location. Thus, it is usually highly desirable that research software has few restrictions in terms of authorization and infrastructure/platform needed to use it.</p> <p>Note</p> <p>Although low restrictions make software more accessible, there are still cases where restrictions may be necessary. For example, some software may be designed to be used to handle sensitive data, and thus, it may be necessary to restrict access to the software to authorized users. In other cases, the software may be designed to work with a specific infrastructure or platform for the sake of reliability and/or performance. </p>"},{"location":"accessibility/A3_unrestricted_access/#a31-registration-compulsory","title":"A3.1. Registration compulsory","text":"<p>The software can be used without registration</p> Why should we measure it? How do we measure it? Types it applies to Registration is a barrier for accessibility, since users may not want to give personal information. Not currently measured all"},{"location":"accessibility/A3_unrestricted_access/#a32-availability-of-version-for-free-operating-system","title":"A3.2. Availability of version for free Operating System","text":"<p>Whether the software can be used in a free operating system</p> Why should we measure it? How do we measure it? Types it applies to Non-free operating systems are a barrier for accessibility. Linux among the compatible Operating Systems is considered valid. non-web"},{"location":"accessibility/A3_unrestricted_access/#a33-availability-for-several-operating-systems","title":"A3.3. Availability for several Operating Systems","text":"<p>There are versions of the software for several operative systems  </p> Why should we measure it? How do we measure it? Types it applies to Supporting multiple operating systems makes the software more accessible to users with diverse needs, constraints and preferences. At least two compatible Operating Systems are considered valid. non-web"},{"location":"accessibility/A3_unrestricted_access/#a34-availability-on-free-e-infrastructures","title":"A3.4. Availability on free e-infrastructures","text":"<p>Software can be used in a free e-infrastructure such as a useGalaxy instance. </p> Why should we measure it? How do we measure it? Types it applies to e-infrastructures are we web-based services that provide computational resources to users. They are accessible theough a web browser, requiring no building or installation in the susers system. They are a good way to make software accessible to a wide range of users. A useGalaxy or VRE public instance is considered valid. non-web"},{"location":"accessibility/A3_unrestricted_access/#a35-availability-on-several-e-infrastructures","title":"A3.5. Availability on several e-infrastructures","text":"<p>Software can be used in several e-infrastructure instances. </p> Why should we measure it? How do we measure it? Types it applies to Users usually use e-infrastructures to build workflows. The e-infrastructure they choose to use, thus, depends on several softwares being available in the same platform and other factors. The more e-infrastructures a software is available in, the greater the likelihood a user will be able to use it. At least two useGalaxy or VRE public instances are considered valid. non-web"},{"location":"findability/F1_identity_uniqueness/","title":"F1. Identity Uniqueness","text":"<p>The software has a proper, unique and persistent identifier. The uniqueness of an identifier is a necessary condition to unambiguously refer to that resource, and that resource alone. </p>"},{"location":"findability/F1_identity_uniqueness/#f11-uniqueness-of-name","title":"F1.1. Uniqueness of name","text":"<p>The software has a unique name to identify it </p> Why should we measure it? How do we measure it? Types it applies to The name is commonly used as the main identifier of a software. Each tool should have a unique name to avoid ambiguities. Different versions of the same software should share a name, but if substantial modifications in the algorithm are done, the identifier should change for the new piece of software. A name is valid. all"},{"location":"findability/F1_identity_uniqueness/#f12-identifiability-of-version","title":"F1.2. Identifiability of version","text":"<p>There is a scheme to uniquely and properly identify the software version.</p> Why should we measure it? How do we measure it? Types it applies to A version scheme is necessary to refer to a specific release of a software and keep track of the incrementally different versions of the software. A version of the form X.X is considered valid. all"},{"location":"findability/F2_existence_of_metadata/","title":"F2. Existence of Metadata","text":"<p>The software is described with rich metadata, including scientific applicability. Metadata makes finding through search engines and deciding if a tool is of interest possible.</p>"},{"location":"findability/F2_existence_of_metadata/#f21-structured-metadata","title":"F2.1. Structured Metadata","text":"<p>Metadata is adjusted to specific metadata formats</p> Why should we measure it? How do we measure it? Types it applies to Specific formats are more machine readable, which increases its findability by search engines At least a source of structured metadata is considered valid. all"},{"location":"findability/F2_existence_of_metadata/#f22-standardized-metadata","title":"F2.2. Standardized Metadata","text":"<p>Metadata is described using accepted ontologies </p> Why should we measure it? How do we measure it? Types it applies to The same piece of information about a software can be stated in many equivalent forms. Each tool being described with different terminology, with non specified meanings, makes metadata very hard to interpret. Automatic processing is also harder. When searching for a software with certain features, the lack of a consusuate terminology makes the process of searching slow and difficult. EDAM, bioschema all"},{"location":"findability/F3_searchability/","title":"F3.  Searchability","text":"<p>How software can be found. There are multitude of mechanisms for scientists looking to find specific software</p>"},{"location":"findability/F3_searchability/#f31-searchability-in-registries","title":"F3.1. Searchability in registries","text":"<p>The software is included in the main software registries.</p> Why should we measure it? How do we measure it? Types it applies to Software registries are the main resource scientists use when searching for software. At least one software registry among the instance sources is considered valid. all"},{"location":"findability/F3_searchability/#f32-searchability-in-software-repositories","title":"F3.2. Searchability in software repositories","text":"<p>The software can be found in any of the major software repositories e.g. GitHub, GitLab, SourceForge,</p> Why should we measure it? How do we measure it? Types it applies to Software repositories can be an additional resource used by scientists when looking for software An associated software repository is considered valid. all"},{"location":"findability/F3_searchability/#f33-searchability-in-literature","title":"F3.3. Searchability in literature","text":"<p>The software can be found in specialized literature services e.g. EuropePMC, PubMed, Journals Site, biorxiv</p> Why should we measure it? How do we measure it? Types it applies to Specialized literature is a good reference to find software, especially to discover new software At least one associated publication is considered valid. all"},{"location":"interoperability/I1_input_output/","title":"I1. Documentation on Input/output data types and formats","text":""},{"location":"interoperability/I1_input_output/#i11-usage-of-standard-data-formats","title":"I1.1. Usage of standard data formats","text":"<p>Input and output data types are formally specified and related to accepted ontologies.</p> Why should we measure it? How do we measure it? Types it applies to Data format transformations to meet software often unique input format requirements are a source of errors and take time and resources. The usage of standard formats by software minimizes the transformations data is subjected to in the course of research. In addition, collective efforts can be made to create good quality tools for the management of data avoiding ad hoc scripting. At least one input or output data format that is specified in the EDAM format ontology is considered valid. all"},{"location":"interoperability/I1_input_output/#i12-usage-of-standard-api-framework","title":"I1.2. Usage of standard API framework","text":"<p>PIs (Rest, libraries) are documented in a standard framework (OpenAPI, WES...).</p> Why should we measure it? How do we measure it? Types it applies to The usage of standard frameworks greatly eases their usage Not measured non-web"},{"location":"interoperability/I1_input_output/#i13-verifiability-of-data-formats","title":"I1.3 Verifiability of data formats","text":"<p>Input and output data formats are specified using verifiable schemas (e.g. XDS, Json schema, ...). </p> Why should we measure it? How do we measure it? Types it applies to Verifiability allows users to automatically make sure their data will be readable by other resources supporting that same format. Standard formats (I1.1) as well as JSON are considered valid. non-web"},{"location":"interoperability/I1_input_output/#i14-flexibility-of-data-format-supported","title":"I1.4. Flexibility of data format supported","text":"<p>The software accepts various input/output data formats for the same operation, or provide the necessary tools to convert other common formats into the supported ones.</p> Why should we measure it? How do we measure it? Types it applies to Data format transformation to meet software often unique input format requirements are a source of errors and take time and resources. The capacity of a software to support various formats avoids the need for data transformation by the user. At least two input or output data formats are valid. all"},{"location":"interoperability/I1_input_output/#i15-generation-of-provenance-information","title":"I1.5. Generation of provenance information","text":"<p>The software genrates provenance information of results following accepted standards (PROV) </p> Why should we measure it? How do we measure it? Types it applies to Provenance information is a key element of FAIR data.  Ideally, FAIR software should produce FAIR Data, of which provenance is a very important part. Not measured. all"},{"location":"reusability/R1_usage_documentation/","title":"R1. Usage documentation","text":""},{"location":"reusability/R1_usage_documentation/#r11-usage-guides","title":"R1.1 Usage guides","text":"<p>Software user guides are provided </p> Why should we measure it? How do we measure it? Types it applies to Guides include the information a user must know in order to know how to make proper use of a software. Any documentation except news, license and terms of use is considered valid. all"},{"location":"reusability/R1_usage_documentation/#r12-usage-examples","title":"R1.2 Usage examples","text":"<p>Examples of use cases are provided </p> Why should we measure it? How do we measure it? Types it applies to Examples provide a demonstration of how to use a software and provide the specificity the guides lack. They complement the information in guides for understanding the use and applicability of a software. Not measured all"},{"location":"reusability/R2_license/","title":"R2. License","text":""},{"location":"reusability/R2_license/#r21-terms-of-use","title":"R2.1. Terms of use","text":"<p>Terms of Use are stated</p> Why should we measure it? How do we measure it? Types it applies to Any condition for the usage of a software must be known prior to its usage. Terms of use or license are considered valid web"},{"location":"reusability/R2_license/#r22-conditions-of-use","title":"R2.2. Conditions of use","text":"<p>Conditions of installation and usage are stated</p> Why should we measure it? How do we measure it? Types it applies to Any condition for the usage of a software must be known prior to its usage. Conditions of use or license are considered valid non-web"},{"location":"reusability/R3_contribution_policy/","title":"R3. Contribution policy","text":""},{"location":"reusability/R3_contribution_policy/#r31-contributors-policy-specification","title":"R3.1. Contributors policy specification","text":"<p>A document stating the contributors policy exists</p> Why should we measure it? How do we measure it? Types it applies to The lack of a policy or guide stating how to contribute to a software prevents external developers willing to contribute to it. Not measured all"},{"location":"reusability/R3_contribution_policy/#r32credit","title":"R3.2.Credit","text":"<p>Credit for contributions is provided</p> Why should we measure it? How do we measure it? Types it applies to The credits for contributions should be stated, as contributors hold the copyright. Authors are considered valid all"},{"location":"reusability/R4_provenance/","title":"R4. Provenance","text":""},{"location":"reusability/R4_provenance/#r41-usage-of-version-control","title":"R4.1. Usage of version control","text":"<p>A version-control system is used to track changes in the software.</p> Why should we measure it? How do we measure it? Types it applies to Version control ensures the changes in software are recorded and searchable. A repository either in github or sourceForge is considered valid all"},{"location":"reusability/R4_provenance/#r42-existence-of-release-policy","title":"R4.2. Existence of release policy","text":"<p>The software follows a defined and documented release policy. </p> Why should we measure it? How do we measure it? Types it applies to Without a release policy, users cannot know the differences between versions of a software. Not measured all"},{"location":"reusability/R4_provenance/#r43-metadata-of-previous-versions-at-software-repositories","title":"R4.3. Metadata of previous versions at software repositories","text":"<p>Metadata of previous versions is available. </p> Why should we measure it? How do we measure it? Types it applies to Even if the code/functionality is missing, the existence of metadata for a given version of a software, used in a published research the user is interested in, for instance, enables them to be certain about the past existence of a software and relevant details about it. Not measured all"}]}